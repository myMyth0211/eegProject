
# load necessary packages
import matplotlib.pyplot as plt
import pydicom.uid
import sys
# from PyQt5 import QtGui
import os
import pydicom
import glob
from PIL import *
import matplotlib.pyplot as plt
from pylab import *
from tkinter.filedialog import *
import PIL.Image as Image

have_numpy = True

try:
    import numpy
except ImportError:
    have_numpy = False
    raise

sys_is_little_endian = (sys.byteorder == 'little')

NumpySupportedTransferSyntaxes = [
    pydicom.uid.ExplicitVRLittleEndian,
    pydicom.uid.ImplicitVRLittleEndian,
    pydicom.uid.DeflatedExplicitVRLittleEndian,
    pydicom.uid.ExplicitVRBigEndian,
]


# 支持"传输"语法
def supports_transfer_syntax(dicom_dataset):
    return (dicom_dataset.file_meta.TransferSyntaxUID in
            NumpySupportedTransferSyntaxes)


def needs_to_convert_to_RGB(dicom_dataset):
    return False


def should_change_PhotometricInterpretation_to_RGB(dicom_dataset):
    return False


# 加载 Dicom图像
def get_pixeldata(dicom_dataset):
    """If NumPy is available, return an ndarray of the Pixel Data.
    Raises
    ------
    TypeError
        If there is no Pixel Data or not a supported data type.
    ImportError
        If NumPy isn't found
    NotImplementedError
        if the transfer syntax is not supported
    AttributeError
        if the decoded amount of data does not match the expected amount
    Returns
    -------
    numpy.ndarray
       The contents of the Pixel Data element (7FE0,0010) as an ndarray.
    """
    if (dicom_dataset.file_meta.TransferSyntaxUID not in
            NumpySupportedTransferSyntaxes):
        raise NotImplementedError("Pixel Data is compressed in a "
                                  "format pydicom does not yet handle. "
                                  "Cannot return array. Pydicom might "
                                  "be able to convert the pixel data "
                                  "using GDCM if it is installed.")

    if not have_numpy:
        msg = ("The Numpy package is required to use pixel_array, and "
               "numpy could not be imported.")
        raise ImportError(msg)
    if 'PixelData' not in dicom_dataset:
        raise TypeError("No pixel data found in this dataset.")

    # Make NumPy format code, e.g. "uint16", "int32" etc
    # from two pieces of info:
    # dicom_dataset.PixelRepresentation -- 0 for unsigned, 1 for signed;
    # dicom_dataset.BitsAllocated -- 8, 16, or 32
    if dicom_dataset.BitsAllocated == 1:
        # single bits are used for representation of binary data
        format_str = 'uint8'
    elif dicom_dataset.PixelRepresentation == 0:
        format_str = 'uint{}'.format(dicom_dataset.BitsAllocated)
    elif dicom_dataset.PixelRepresentation == 1:
        format_str = 'int{}'.format(dicom_dataset.BitsAllocated)
    else:
        format_str = 'bad_pixel_representation'
    try:
        numpy_dtype = numpy.dtype(format_str)
    except TypeError:
        msg = ("Data type not understood by NumPy: "
               "format='{}', PixelRepresentation={}, "
               "BitsAllocated={}".format(
            format_str,
            dicom_dataset.PixelRepresentation,
            dicom_dataset.BitsAllocated))
        raise TypeError(msg)

    if dicom_dataset.is_little_endian != sys_is_little_endian:
        numpy_dtype = numpy_dtype.newbyteorder('S')

    pixel_bytearray = dicom_dataset.PixelData

    if dicom_dataset.BitsAllocated == 1:
        # if single bits are used for binary representation, a uint8 array
        # has to be converted to a binary-valued array (that is 8 times bigger)
        try:
            pixel_array = numpy.unpackbits(
                numpy.frombuffer(pixel_bytearray, dtype='uint8'))
        except NotImplementedError:
            # PyPy2 does not implement numpy.unpackbits
            raise NotImplementedError(
                'Cannot handle BitsAllocated == 1 on this platform')
    else:
        pixel_array = numpy.frombuffer(pixel_bytearray, dtype=numpy_dtype)
    length_of_pixel_array = pixel_array.nbytes
    expected_length = dicom_dataset.Rows * dicom_dataset.Columns
    if ('NumberOfFrames' in dicom_dataset and
            dicom_dataset.NumberOfFrames > 1):
        expected_length *= dicom_dataset.NumberOfFrames
    if ('SamplesPerPixel' in dicom_dataset and
            dicom_dataset.SamplesPerPixel > 1):
        expected_length *= dicom_dataset.SamplesPerPixel
    if dicom_dataset.BitsAllocated > 8:
        expected_length *= (dicom_dataset.BitsAllocated // 8)
    padded_length = expected_length
    if expected_length & 1:
        padded_length += 1
    if length_of_pixel_array != padded_length:
        raise AttributeError(
            "Amount of pixel data %d does not "
            "match the expected data %d" %
            (length_of_pixel_array, padded_length))
    if expected_length != padded_length:
        pixel_array = pixel_array[:expected_length]
    if should_change_PhotometricInterpretation_to_RGB(dicom_dataset):
        dicom_dataset.PhotometricInterpretation = "RGB"
    if dicom_dataset.Modality.lower().find('ct') >= 0:  # CT图像需要得到其CT值图像
        pixel_array = pixel_array * dicom_dataset.RescaleSlope + dicom_dataset.RescaleIntercept  # 获得图像的CT值
    pixel_array = pixel_array.reshape(dicom_dataset.Rows, dicom_dataset.Columns * dicom_dataset.SamplesPerPixel)
    return pixel_array, dicom_dataset.Rows, dicom_dataset.Columns


def setDicomWinWidthWinCenter(img_data, winwidth, wincenter, rows, cols):
    img_temp = img_data
    img_temp.flags.writeable = True
    min = (2 * wincenter - winwidth) / 2.0 + 0.5
    max = (2 * wincenter + winwidth) / 2.0 + 0.5
    dFactor = 255.0 / (max - min)

    for i in numpy.arange(rows):
        for j in numpy.arange(cols):
            img_temp[i, j] = int((img_temp[i, j] - min) * dFactor)

    min_index = img_temp < min
    img_temp[min_index] = 0
    max_index = img_temp > max
    img_temp[max_index] = 255

    return img_temp


def loadFileInformation(filename):
    information = {}
    ds = pydicom.read_file(filename)
    information['PatientID'] = ds.PatientID
    information['PatientName'] = ds.PatientName
    information['PatientBirthDate'] = ds.PatientBirthDate
    information['PatientSex'] = ds.PatientSex
    information['StudyID'] = ds.StudyID
    information['StudyDate'] = ds.StudyDate
    information['StudyTime'] = ds.StudyTime
    information['InstitutionName'] = ds.InstitutionName
    information['Manufacturer'] = ds.Manufacturer
    print(dir(ds))
    print(type(information))
    return information


def main_single():
    dcm = pydicom.read_file('81228816')  # load dicom_file
    # 得到 CT 值，图像的 长， 宽
    pixel_array, dcm.Rows, dcm.Columns = get_pixeldata(dcm)
    # 调整窗位、窗宽
    img_data = pixel_array
    winwidth = 500
    wincenter = 50
    rows = dcm.Rows
    cols = dcm.Columns
    dcm_temp = setDicomWinWidthWinCenter(img_data, winwidth, wincenter, rows, cols)
    # 可视化
    dcm_img = Image.fromarray(dcm_temp)  # 将Numpy转换为PIL.Image
    dcm_img = dcm_img.convert('L')
    # plt.imshow(img, cmap=plt.cm.bone)
    # 保存为jpg文件，用作后面的生成label用
    dcm_img.save('../output/temp.jpg')
    # 显示图像
    dcm_img.show()


def main_mulit(path, num):
    #-------------#
    #注意源路径的文件结构，包含两级时使用两个循环
    #------------#
    names = os.listdir(path)  # 读取文件夹中的所有文件名
    for j in range(len(names)):
        if names[j].endswith(".dcm"):
            dicom_name = os.path.join(path,names[j])
            dcm = pydicom.read_file(dicom_name)  # 读取 dicom 文件
            pixel_array, dcm.Rows, dcm.Columns = get_pixeldata(dcm)  # 得到 dicom文件的 CT 值
            img_data = pixel_array
            winwidth = 500
            wincenter = 50
            rows = dcm.Rows
            cols = dcm.Columns
            dcm_temp = setDicomWinWidthWinCenter(img_data, winwidth, wincenter, rows, cols)  # 调整窗位、窗宽
            #  可视化
            dcm_img = Image.fromarray(dcm_temp)  # 将 Numpy转换为 PIL.Image
            dcm_img = dcm_img.convert('L')
            # 批量保存
            if not os.path.exists("datasets/%s" % (os.path.split(path)[-1])):
                os.makedirs("datasets/%s" % (os.path.split(path)[-1]))
            dcm_img.save("datasets/%s/%s.png" % (os.path.split(path)[-1],"slice_{}".format(num)))
            num += 1
    return num


def get_gt(path, num):
    gt_names = os.listdir(path)  # 读取文件夹中的所有文件名
    for i in range(len(gt_names)):
            dicom_name = os.path.join(path, gt_names[i])
            img_gt = Image.open(dicom_name)
            # 批量保存
            if num % 5 == 4:
                img_gt.save("datasets/val/GT/%s.png" % ("slice_{}_gt".format(num)))
            elif num % 5 == 3:
                img_gt.save("datasets/test/GT/%s.png" % ("slice_{}_gt".format(num)))
            else:
                img_gt.save("datasets/train/GT/%s.png" % ("slice_{}_gt".format(num)))
            num += 1
    return num


if __name__ == "__main__":
    count = 0
    # train_set = [1, 2, 5, 6, 8, 10, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    # test_set = [3, 4, 7, 9, 11, 12, 13, 15, 17, 20]

    count = main_mulit("E:\肺部CT图像/ZHOU-AN-XIN",count)
    print(count)
